<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZAESKY&#39;s Blog</title>
  
  <subtitle>我的思想聚集地</subtitle>
  <link href="https://zaesky.github.io/atom.xml" rel="self"/>
  
  <link href="https://zaesky.github.io/"/>
  <updated>2022-04-13T12:53:11.743Z</updated>
  <id>https://zaesky.github.io/</id>
  
  <author>
    <name>ZAESKY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript--立即执行函数</title>
    <link href="https://zaesky.github.io/2022/04/13/javascript-%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://zaesky.github.io/2022/04/13/javascript-%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/</id>
    <published>2022-04-13T12:50:31.000Z</published>
    <updated>2022-04-13T12:53:11.743Z</updated>
    
    <content type="html"><![CDATA[<p>函数对象()</p><p>立即执行函数</p><p>函数定义完，立即被调用，这种函数叫做立即执行函数</p><p>立即执行函数往往只会执行一次</p><blockquote><p>(function(){</p><p>​    alert(“我是一个匿名函数~~~”);</p><p>​    })();</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span>+b);</span><br><span class="line">    &#125;)(<span class="number">123</span>,<span class="number">456</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;函数对象()&lt;/p&gt;
&lt;p&gt;立即执行函数&lt;/p&gt;
&lt;p&gt;函数定义完，立即被调用，这种函数叫做立即执行函数&lt;/p&gt;
&lt;p&gt;立即执行函数往往只会执行一次&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(function(){&lt;/p&gt;
&lt;p&gt;​    alert(“我是一个匿名函数~~</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--返回值（return）【实例】</title>
    <link href="https://zaesky.github.io/2022/04/13/javascript-%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%88return%EF%BC%89%E3%80%90%E5%AE%9E%E4%BE%8B%E3%80%91/"/>
    <id>https://zaesky.github.io/2022/04/13/javascript-%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%88return%EF%BC%89%E3%80%90%E5%AE%9E%E4%BE%8B%E3%80%91/</id>
    <published>2022-04-13T12:39:23.000Z</published>
    <updated>2022-04-13T12:46:24.124Z</updated>
    
    <content type="html"><![CDATA[<h3 id="判断是否为偶数"><a href="#判断是否为偶数" class="headerlink" title="判断是否为偶数"></a>判断是否为偶数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;函数要执行了~~~~&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;<span class="number">5</span> ; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//使用break可以退出当前的循环</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//continue用于跳过当次循环</span></span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line"><span class="comment">//使用return可以结束整个函数</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;函数执行完了~~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure><p>返回值可以是任意的数据类型</p><p>也可以是一个对象，也可以是一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//返回一个对象</span></span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">name</span>:<span class="string">&quot;沙和尚&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">fun2</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun3</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//在函数内部再声明一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun4</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;我是fun4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将fun4函数对象作为返回值返回</span></span><br><span class="line"><span class="keyword">return</span> fun4;</span><br><span class="line">a = <span class="title function_">fun3</span>();</span><br><span class="line"><span class="comment">//console.log(a);</span></span><br><span class="line"><span class="comment">//a();</span></span><br><span class="line"><span class="title function_">fun3</span>()();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;判断是否为偶数&quot;&gt;&lt;a href=&quot;#判断是否为偶数&quot; class=&quot;headerlink&quot; title=&quot;判断是否为偶数&quot;&gt;&lt;/a&gt;判断是否为偶数&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--返回值（return）</title>
    <link href="https://zaesky.github.io/2022/04/13/javascript-%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%88return%EF%BC%89/"/>
    <id>https://zaesky.github.io/2022/04/13/javascript-%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%88return%EF%BC%89/</id>
    <published>2022-04-13T12:27:18.000Z</published>
    <updated>2022-04-13T12:38:27.617Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>创建一个函数，用来计算三个数的和</strong></p><p>可以使用 return 来设置函数的返回值</p><p>语法：</p><blockquote><p>return 值</p></blockquote><ul><li><code>return</code>后的值将会会作为函数的执行结果返回</li><li>可以定义一个变量，来接收该结果</li><li>在函数中<code>return</code>后的语句都不会执行</li><li>如果<code>return</code>语句后不跟任何值就相当于返回一个<code>undefined</code></li><li>如果函数中不写<code>return</code>，则也会返回<code>undefined</code></li><li><code>return</code>后可以跟任意类型的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a , b , c</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(a + b +c);</span><br><span class="line">    <span class="keyword">var</span> d = a + b + c;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用函数</strong></p><ul><li>变量result的值就是函数的执行结果</li><li>函数返回什么result的值就是什么</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="title function_">sum</span>(<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result = &quot;</span>+result);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; &lt;strong&gt;创建一个函数，用来计算三个数的和&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用 return 来设置函数的返回值&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;return 值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--函数的参数</title>
    <link href="https://zaesky.github.io/2022/04/13/javascript-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/"/>
    <id>https://zaesky.github.io/2022/04/13/javascript-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</id>
    <published>2022-04-13T12:13:30.000Z</published>
    <updated>2022-04-13T12:24:18.432Z</updated>
    
    <content type="html"><![CDATA[<h4 id="定义一个用来求两个数和的函数"><a href="#定义一个用来求两个数和的函数" class="headerlink" title="定义一个用来求两个数和的函数"></a>定义一个用来求两个数和的函数</h4><ul><li>可以在函数的<code>()</code>中来指定一个或多个形参（形式参数）</li><li>多个形参之间使用<code>,</code>隔开，声明形参就相当于在函数内部声明了对应的变量</li><li>但是并不赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span>+b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在调用函数时，可以在<code>()</code>中指定实参（实际参数）</p><p>实参将会赋值给函数中对应的形参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>,<span class="number">456</span>);</span><br></pre></td></tr></table></figure><p><strong>调用函数时解析器不会检查实参的类型，所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型的检查。</strong></p><p>函数的实参可以是任意的数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="literal">true</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>调用函数时，解析器也不会检查实参的数量</p><p>多余实参不会被赋值</p><p>如果实参的数量少于形参的数量，则没有对应实参的形参将是 <strong>undefined</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>,<span class="number">456</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">true</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;定义一个用来求两个数和的函数&quot;&gt;&lt;a href=&quot;#定义一个用来求两个数和的函数&quot; class=&quot;headerlink&quot; title=&quot;定义一个用来求两个数和的函数&quot;&gt;&lt;/a&gt;定义一个用来求两个数和的函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可以在函数的&lt;code&gt;()&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--函数</title>
    <link href="https://zaesky.github.io/2022/04/13/javascript-%E5%87%BD%E6%95%B0/"/>
    <id>https://zaesky.github.io/2022/04/13/javascript-%E5%87%BD%E6%95%B0/</id>
    <published>2022-04-13T12:00:58.000Z</published>
    <updated>2022-04-13T12:27:03.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数-function"><a href="#函数-function" class="headerlink" title="函数 function"></a>函数 function</h3><ul><li>函数也是一个对象</li><li>函数中可以封装一些功能（代码），在需要时可以执行这些功能（代码）</li><li>函数中可以保存一些代码在需要的时候调用</li><li>使用typeof检查一个函数对象时，会返回function</li></ul><h4 id="创建一个函数对象"><a href="#创建一个函数对象" class="headerlink" title="创建一个函数对象"></a>创建一个函数对象</h4><p>可以将要封装的代码以字符串的形式传递给构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;console.log(&#x27;Hello 这是我的第一个函数&#x27;);&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>我们在实际开发中很少使用构造函数来创建一个函数对象。</p></blockquote><p>封装到函数中的代码不会立即执行</p><p>函数中的代码会在函数调用的时候执行</p><p>调用函数 语法：</p><blockquote><p>函数对象()</p></blockquote><p>当调用函数时，函数中封装的代码会按照顺序执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure><p>使用 <strong>函数声明</strong> 来创建一个函数</p><p>语法：</p><blockquote><p>function 函数名([形参1,形参2…形参N]){<br>    语句…<br>}</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是我的第二个函数~&quot;</span>);</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;哈哈哈哈哈&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;(&gt;_&lt;)~~&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 使用 <strong>函数表达式</strong> 来创建一个函数</p><blockquote><p>var 函数名  &#x3D; function([形参1,形参2…形参N]){<br>            语句….<br>            }</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun3 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是匿名函数中封装的代码&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">fun3</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;函数-function&quot;&gt;&lt;a href=&quot;#函数-function&quot; class=&quot;headerlink&quot; title=&quot;函数 function&quot;&gt;&lt;/a&gt;函数 function&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数也是一个对象&lt;/li&gt;
&lt;li&gt;函数中可以封装一些功</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript--对象字面量</title>
    <link href="https://zaesky.github.io/2022/04/12/JavaScript-%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F/"/>
    <id>https://zaesky.github.io/2022/04/12/JavaScript-%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F/</id>
    <published>2022-04-12T11:24:01.000Z</published>
    <updated>2022-04-12T11:40:17.568Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>使用对象字面量来创建一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> obj);</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>使用对象字面量，可以在创建对象时，直接指定对象中的属性</p><p>语法：</p><blockquote><p>{属性名:属性值,属性名:属性值….}</p></blockquote><p>对象字面量的属性名可以加引号也可以不加，建议不加。</p><ul><li><p>如果要使用一些特殊的名字，则必须加引号</p></li><li><p>属性名和属性值是一组一组的名值对结构</p></li><li><p>名和值之间使用:连接，多个名值对之间使用<code>,</code>隔开</p></li><li><pre><code>如果一个属性之后没有其他的属性了，就不要写</code></pre> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">13</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="attr">test</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;沙僧&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">test</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;创建一个对象&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript--基本数据类型和引用数据类型</title>
    <link href="https://zaesky.github.io/2022/04/12/JavaScript-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://zaesky.github.io/2022/04/12/JavaScript-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-04-12T11:23:06.000Z</published>
    <updated>2022-04-12T11:33:00.273Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li>String</li><li>Number </li><li>Boolean </li><li>Null </li><li>Undefined</li></ul><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul><li>Object</li></ul><p>JS中的变量都是保存到栈内存中的，基本数据类型的值直接在栈内存中存储，值与值之间是独立存在，修改一个变量不会影响其他的变量。</p><p>对象是保存到堆内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间，而变量保存的是对象的内存地址（对象的引用），如果两个变量保存的是同一个对象引用，当一个通过一个变量修改属性时，另一个也会受到影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">    a++;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span>+b);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = obj;</span><br><span class="line"><span class="comment">//修改obj的name属性</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;猪八戒&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置obj2为null</span></span><br><span class="line">obj2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c == d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj4 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj3.<span class="property">name</span> = <span class="string">&quot;沙和尚&quot;</span>;</span><br><span class="line">obj4.<span class="property">name</span> = <span class="string">&quot;沙和尚&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj4);</span><br></pre></td></tr></table></figure><p>当比较两个基本数据类型的值时，就是比较值。<br>而比较两个引用数据类型时，它是比较的对象的内存地址。<br>如果两个对象是一摸一样的，但是地址不同，它也会返回false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3 == obj4);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number &lt;/li&gt;
&lt;li&gt;Boolean &lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript--属性名与属性值</title>
    <link href="https://zaesky.github.io/2022/04/12/JavaScript-%E5%B1%9E%E6%80%A7%E5%90%8D%E4%B8%8E%E5%B1%9E%E6%80%A7%E5%80%BC/"/>
    <id>https://zaesky.github.io/2022/04/12/JavaScript-%E5%B1%9E%E6%80%A7%E5%90%8D%E4%B8%8E%E5%B1%9E%E6%80%A7%E5%80%BC/</id>
    <published>2022-04-12T11:04:02.000Z</published>
    <updated>2022-04-12T11:19:56.833Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><h3 id="向对象中添加属性"><a href="#向对象中添加属性" class="headerlink" title="向对象中添加属性"></a>向对象中添加属性</h3><pre><code> * 属性名： - 对象的属性名不强制要求遵守标识符的规范- 什么乱七八糟的名字都可以使用- 但是我们使用是还是尽量按照标识符的规范去做</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line">obj.<span class="property">var</span> = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>如果要使用特殊的属性名，不能采用<code>.</code>的方式来操作</strong><br>需要使用另一种方式：<br>语法：</p><blockquote><p>对象[“属性名”] &#x3D; 属性值</p></blockquote><p>读取时也需要采用这种方式<br>使用<code>[]</code>这种形式去操作属性，更加的灵活<br>在<code>[]</code>中可以直接传递一个变量，这样变量值是多少就会读取那个属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj[<span class="string">&quot;123&quot;</span>] = <span class="number">789</span>;</span><br><span class="line">obj[<span class="string">&quot;nihao&quot;</span>] = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="string">&quot;nihao&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&quot;123&quot;</span>]);</span><br></pre></td></tr></table></figure><h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3><ul><li><p>JS对象的属性值，可以是任意的数据类型</p></li><li><p>甚至也可以是一个对象</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">test</span> = <span class="literal">true</span>;</span><br><span class="line">obj.<span class="property">test</span> = <span class="literal">null</span>;</span><br><span class="line">obj.<span class="property">test</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;猪八戒&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将obj2设置为obj的属性</span></span><br><span class="line">obj.<span class="property">test</span> = obj2;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">test</span>.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><h3 id="in-运算符"><a href="#in-运算符" class="headerlink" title="in 运算符"></a>in 运算符</h3><p>通过该运算符可以检查一个对象中是否含有指定的属性</p><p><strong>如果有则返回true，没有则返回false</strong></p><p>语法：</p><blockquote><p>“属性名” in 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查obj中是否含有test2属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test2&quot;</span> <span class="keyword">in</span> obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span> <span class="keyword">in</span> obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> obj);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
    <category term="属性" scheme="https://zaesky.github.io/tags/%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript--对象</title>
    <link href="https://zaesky.github.io/2022/04/12/JavaScript-%E5%AF%B9%E8%B1%A1/"/>
    <id>https://zaesky.github.io/2022/04/12/JavaScript-%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-04-12T09:39:58.000Z</published>
    <updated>2022-04-12T10:00:21.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS中数据类型"><a href="#JS中数据类型" class="headerlink" title="JS中数据类型"></a>JS中数据类型</h3><p><strong>String 字符串</strong><br><strong>Number 数值</strong><br><strong>Boolean 布尔值</strong><br><strong>Null 空值</strong><br><strong>Undefined 未定义</strong><br>以上这五种类型属于基本数据类型，以后我们看到的值只要不是上边的5种，全都是对象</p><h4 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a><strong>Object 对象</strong></h4><p>基本数据类型都是单一的值”hello” 123 true<br>值和值之间没有任何的联系。</p><p>在JS中来表示一个人的信息（name gender age）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> gender = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>如果使用基本数据类型的数据，我们所创建的变量都是独立，不能成为一个整体。<br>对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</p><h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><h4 id="1-内建对象"><a href="#1-内建对象" class="headerlink" title="1.内建对象"></a><strong>1.内建对象</strong></h4><p>由ES标准中定义的对象，在任何的ES的实现中都可以使用</p><p>比如：Math String Number Boolean Function Object….</p><h4 id="2-宿主对象"><a href="#2-宿主对象" class="headerlink" title="2.宿主对象"></a>2.宿主对象</h4><p>由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象</p><p>比如 BOM DOM</p><h4 id="3-自定义对象"><a href="#3-自定义对象" class="headerlink" title="3.自定义对象"></a>3.自定义对象</h4><p>由开发人员自己创建的对象</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>使用new关键字调用的函数，是构造函数constructor</p><p>构造函数是专门用来创建对象的函数</p><p>使用typeof检查一个对象时，会返回object</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>在对象中保存的值称为属性<br>向对象添加属性</p><blockquote><p>语法：对象.属性名 &#x3D; 属性值;</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向obj中添加一个name属性</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line"><span class="comment">//向obj中添加一个gender属性</span></span><br><span class="line">obj.<span class="property">gender</span> = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="comment">//向obj中添加一个age属性</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><h4 id="读取对象中的属性"><a href="#读取对象中的属性" class="headerlink" title="读取对象中的属性"></a>读取对象中的属性</h4><p>语法：</p><blockquote><p>对象.属性名</p></blockquote><p><strong>如果读取对象中没有的属性，不会报错而是会返回undefined</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">gender</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">hello</span>);</span><br></pre></td></tr></table></figure><h4 id="修改对象的属性值"><a href="#修改对象的属性值" class="headerlink" title="修改对象的属性值"></a>修改对象的属性值</h4><p>语法：</p><blockquote><p>对象.属性名 &#x3D; 新值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;tom&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h4><p>语法：</p><blockquote><p>delete 对象.属性名</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JS中数据类型&quot;&gt;&lt;a href=&quot;#JS中数据类型&quot; class=&quot;headerlink&quot; title=&quot;JS中数据类型&quot;&gt;&lt;/a&gt;JS中数据类型&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;String 字符串&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Number 数值&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>算法设计与分析--最大字段和问题【动态规划法】</title>
    <link href="https://zaesky.github.io/2022/04/09/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E6%9C%80%E5%A4%A7%E5%AD%97%E6%AE%B5%E5%92%8C%E9%97%AE%E9%A2%98%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B3%95%E3%80%91/"/>
    <id>https://zaesky.github.io/2022/04/09/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E6%9C%80%E5%A4%A7%E5%AD%97%E6%AE%B5%E5%92%8C%E9%97%AE%E9%A2%98%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B3%95%E3%80%91/</id>
    <published>2022-04-09T07:39:50.000Z</published>
    <updated>2022-04-09T08:10:26.688Z</updated>
    
    <content type="html"><![CDATA[<h5 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h5><blockquote><p>什么是最大字段和问题？</p></blockquote><p><strong>给定由 n 个整数（可能为负整数）组成的序列a1，a2，a3…an，求该数列中连续子段和最大！</strong></p><p>  例如：当（a1，a2，a3，a4，a5）&#x3D;（-2,11，-4,13，-5，-2）时，最大字段和为 20 （11 + (-4) + 13）;</p><h5 id="条件递推"><a href="#条件递推" class="headerlink" title="条件递推"></a>条件递推</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/806c0446f60541c795e29db3d7b29e94.png"                      alt="img"                ></p><blockquote><p>D[i]表示从i开始的最大字段和。（但我们不是从前往后找字段结束位置）<br>根据递推公式，我们可知要想求得D[i],就必须知道D[i+1],所以我们从前往后计算。<br>如下图：以i&#x3D;12开始的子段和D[12]&#x3D;X[12]&#x3D;-1，该子段结束位置Rec[12]&#x3D;i&#x3D;12；<br>当i&#x3D;11时，D[11+1]&lt;0,所以D[11]&#x3D;X[11]&#x3D;7,Rec[i]&#x3D;i&#x3D;11;<br>当i&#x3D;10时，D[10+1]&gt;0,所以D[10]&#x3D;X[10]+D[11]&#x3D;3+7,Rec&#x3D;i+1&#x3D;11;<br>…</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/99e6252580f94889a9b3148e2db41278.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Z2X5rS76L-H5p2l,size_20,color_FFFFFF,t_70,g_se,x_16"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/424a688ab7d04338a5ccb53fae23860f.png"                      alt="img"                ></p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态规划函数 接收数组和数组个数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dynamicPlan</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="comment">//定义三个数组</span></span><br><span class="line">    <span class="comment">//sum数组用于记录累加结果</span></span><br><span class="line">    <span class="comment">//endRecord数组用于记录结束位置</span></span><br><span class="line">    <span class="type">int</span> sum[n],endRecord[n];</span><br><span class="line">    <span class="comment">//初始化sum数组最后一个值</span></span><br><span class="line">    sum[n] = a[n];</span><br><span class="line">    <span class="comment">//初始化记录结束位置的数组</span></span><br><span class="line">    endRecord[n] = n;</span><br><span class="line">    <span class="comment">//从右往左的计算值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">    <span class="comment">//情况1：如果i + 1的数大于0 sum数组记录下i + （i+1）的数</span></span><br><span class="line">    <span class="comment">//endRecord记录下结束位置的值</span></span><br><span class="line">    <span class="keyword">if</span>(sum[i + <span class="number">1</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        sum[i] = a[i] + sum[i + <span class="number">1</span>];</span><br><span class="line">        endRecord[i] = endRecord[i + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//情况2：当i + 1的数小于0时</span></span><br><span class="line">    <span class="comment">//值为a数组本身的值</span></span><br><span class="line">    <span class="comment">//结尾位置变为i</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sum[i] = a[i];</span><br><span class="line">        endRecord[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;累加和数组为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n ;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,sum[i]);</span><br><span class="line">    <span class="comment">//查找结果函数</span></span><br><span class="line">    findResult(n,a,sum,endRecord);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">findResult</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> a[],<span class="type">int</span> sum[],<span class="type">int</span> endRecord[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> max,l,r,i;</span><br><span class="line">    <span class="comment">//从左往右开始查找</span></span><br><span class="line">    <span class="comment">//max初始化为sum数组第一个值</span></span><br><span class="line">    max = sum[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//和sum数组第二个值开始比对</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(max &lt; sum[i])&#123;</span><br><span class="line">        max = sum[i];</span><br><span class="line">        l = i;</span><br><span class="line">        r = endRecord[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n原数组为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;= n ; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n最大字段和为：%d 开始位置的数组下标：%d 结束位置的数组下标：%d&quot;</span>,max,l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//这里可以改为输入的方式</span></span><br><span class="line">    <span class="type">int</span> n=<span class="number">11</span>;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">-2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">-2</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">dynamicPlan(a,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;问题引入&quot;&gt;&lt;a href=&quot;#问题引入&quot; class=&quot;headerlink&quot; title=&quot;问题引入&quot;&gt;&lt;/a&gt;问题引入&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;什么是最大字段和问题？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;给定由 n 个整</summary>
      
    
    
    
    <category term="算法设计与分析" scheme="https://zaesky.github.io/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="算法" scheme="https://zaesky.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://zaesky.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zaesky.github.io/2022/04/06/hello-world/"/>
    <id>https://zaesky.github.io/2022/04/06/hello-world/</id>
    <published>2022-04-06T12:04:00.444Z</published>
    <updated>2022-04-06T12:04:00.445Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
