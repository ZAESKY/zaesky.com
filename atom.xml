<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZAESKY&#39;s Blog</title>
  
  <subtitle>我的思想聚集地</subtitle>
  <link href="https://zaesky.github.io/atom.xml" rel="self"/>
  
  <link href="https://zaesky.github.io/"/>
  <updated>2022-05-08T13:02:55.968Z</updated>
  <id>https://zaesky.github.io/</id>
  
  <author>
    <name>ZAESKY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript--数组的遍历（forEach）</title>
    <link href="https://zaesky.github.io/2022/05/08/javascript-%E6%95%B0%E7%BB%84%E7%9A%84%E9%81%8D%E5%8E%86%EF%BC%88forEach%EF%BC%89/"/>
    <id>https://zaesky.github.io/2022/05/08/javascript-%E6%95%B0%E7%BB%84%E7%9A%84%E9%81%8D%E5%8E%86%EF%BC%88forEach%EF%BC%89/</id>
    <published>2022-05-08T12:54:11.000Z</published>
    <updated>2022-05-08T13:02:55.968Z</updated>
    
    <content type="html"><![CDATA[<p>一般我们都是使用for循环去遍历数组，JS中还为我们提供了一个方法，用来遍历数组</p><blockquote><p>forEach()</p></blockquote><p>这个方法只支持IE8以上的浏览器</p><p>IE8及以下的浏览器均不支持该方法，所以如果需要兼容IE8，则不要使用forEach</p><p>还是使用for循环来遍历</p><h4 id="传统的遍历方式"><a href="#传统的遍历方式" class="headerlink" title="传统的遍历方式"></a><strong>传统的遍历方式</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//创建一个数组</span><br><span class="line">var arr = [&quot;孙悟空&quot;,&quot;猪八戒&quot;,&quot;沙和尚&quot;,&quot;唐僧&quot;,&quot;白骨精&quot;];</span><br><span class="line">for(var i=0 ; i&lt;arr.length ; i++)&#123;</span><br><span class="line">        console.log(arr[i]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="使用forEach遍历"><a href="#使用forEach遍历" class="headerlink" title="使用forEach遍历"></a>使用forEach遍历</h4><blockquote><p>forEach()方法需要一个函数作为参数</p></blockquote><p>像这种函数，由我们创建但是不由我们调用的，我们称为回调函数</p><p>数组中有几个元素函数就会执行几次，每次执行时，浏览器会将遍历到的元素</p><p>以实参的形式传递进来，我们可以来定义形参，来读取这些内容</p><p>浏览器会在回调函数中传递三个参数：</p><ul><li>第一个参数，就是当前正在遍历的元素</li><li>第二个参数，就是当前正在遍历的元素的索引</li><li>第三个参数，就是正在遍历的数组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//创建一个数组</span><br><span class="line">var arr = [&quot;孙悟空&quot;,&quot;猪八戒&quot;,&quot;沙和尚&quot;,&quot;唐僧&quot;,&quot;白骨精&quot;];</span><br><span class="line">arr.forEach(function(value , index , obj)&#123;</span><br><span class="line">            console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般我们都是使用for循环去遍历数组，JS中还为我们提供了一个方法，用来遍历数组&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;forEach()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个方法只支持IE8以上的浏览器&lt;/p&gt;
&lt;p&gt;IE8及以下的浏览器均不支持该方法，所以如</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--数组的练习（1）</title>
    <link href="https://zaesky.github.io/2022/05/08/javascript-%E6%95%B0%E7%BB%84%E7%9A%84%E7%BB%83%E4%B9%A0%EF%BC%881%EF%BC%89/"/>
    <id>https://zaesky.github.io/2022/05/08/javascript-%E6%95%B0%E7%BB%84%E7%9A%84%E7%BB%83%E4%B9%A0%EF%BC%881%EF%BC%89/</id>
    <published>2022-05-08T12:49:06.000Z</published>
    <updated>2022-05-08T13:39:30.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="将大于18的对象输出"><a href="#将大于18的对象输出" class="headerlink" title="将大于18的对象输出"></a>将大于18的对象输出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name , age , gender</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改Person原型的toString</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Person[name=&quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;,age=&quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Person对象</span></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">28</span>);</span><br><span class="line"><span class="keyword">var</span> per3 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;红孩儿&quot;</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> per4 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;蜘蛛精&quot;</span>,<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> per5 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;二郎神&quot;</span>,<span class="number">38</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将这些person对象放入到一个数组中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> perArr = [per,per2,per3,per4,per5];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建一个函数，可以将perArr中的满18岁的Person提取出来，</span></span><br><span class="line"><span class="comment"> * 然后封装到一个新的数组中并返回</span></span><br><span class="line"><span class="comment"> * arr</span></span><br><span class="line"><span class="comment"> * 形参，要提取信息的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAdult</span>(<span class="params">arr</span>)&#123;</span><br><span class="line"><span class="comment">//创建一个新的数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历arr，获取arr中Person对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;arr.<span class="property">length</span> ; i++)&#123;</span><br><span class="line"><span class="keyword">var</span> p = arr[i];</span><br><span class="line"><span class="comment">//判断Person对象的age是否大于等于18</span></span><br><span class="line"><span class="keyword">if</span>(p.<span class="property">age</span> &gt;= <span class="number">18</span>)&#123;</span><br><span class="line"><span class="comment">//如果大于等于18，则将这个对象添加到newArr中</span></span><br><span class="line"><span class="comment">//将对象放入到新数组中</span></span><br><span class="line">newArr.<span class="title function_">push</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将新的数组返回</span></span><br><span class="line"><span class="keyword">return</span> newArr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">getAdult</span>(perArr);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>![image-20220508205247991](C:\Users\David Zhong\AppData\Roaming\Typora\typora-user-images\image-20220508205247991.png)</p><h3 id="将数组中重复的数字删除"><a href="#将数组中重复的数字删除" class="headerlink" title="将数组中重复的数字删除"></a>将数组中重复的数字删除</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除数组中重复的数字</span></span><br><span class="line"><span class="comment">//获取数组中的每一个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;arr.<span class="property">length</span> ; i++)&#123;</span><br><span class="line"><span class="comment">//console.log(arr[i]);</span></span><br><span class="line"><span class="comment">/*获取当前元素后的所有元素*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span> ; j&lt;arr.<span class="property">length</span> ; j++)&#123;</span><br><span class="line"><span class="comment">//console.log(&quot;----&gt;&quot;+arr[j]);</span></span><br><span class="line"><span class="comment">//判断两个元素的值是否相等</span></span><br><span class="line"><span class="keyword">if</span>(arr[i] == arr[j])&#123;</span><br><span class="line"><span class="comment">//如果相等则证明出现了重复的元素，则删除j对应的元素</span></span><br><span class="line">arr.<span class="title function_">splice</span>(j,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//当删除了当前j所在的元素以后，后边的元素会自动补位</span></span><br><span class="line"><span class="comment">//此时将不会在比较这个元素吧，我需要在比较一次j所在位置的元素</span></span><br><span class="line"><span class="comment">//使j自减</span></span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![image-20220508213923005](C:\Users\David Zhong\AppData\Roaming\Typora\typora-user-images\image-20220508213923005.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;将大于18的对象输出&quot;&gt;&lt;a href=&quot;#将大于18的对象输出&quot; class=&quot;headerlink&quot; title=&quot;将大于18的对象输出&quot;&gt;&lt;/a&gt;将大于18的对象输出&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--数组的方法</title>
    <link href="https://zaesky.github.io/2022/05/01/javascript-%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://zaesky.github.io/2022/05/01/javascript-%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2022-05-01T11:05:56.000Z</published>
    <updated>2022-05-08T13:29:54.046Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>];</span><br></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><p>该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</p><p>可以将要添加的元素作为方法的参数传递</p><p>这样这些元素将会自动添加到数组的末尾</p><p>该方法会将数组新的长度作为返回值返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">push</span>(<span class="string">&quot;唐僧&quot;</span>,<span class="string">&quot;蜘蛛精&quot;</span>,<span class="string">&quot;白骨精&quot;</span>,<span class="string">&quot;玉兔精&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result = &quot;</span>+result);</span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p>该方法可以删除数组的最后一个元素,并将被删除的元素作为返回值返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result = &quot;</span>+result);</span><br></pre></td></tr></table></figure><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><p>向数组开头添加一个或多个元素，并返回新的数组长度<br>向前边插入元素以后，其他的元素索引会依次调整</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&quot;牛魔王&quot;</span>,<span class="string">&quot;二郎神&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><p>可以删除数组的第一个元素，并将被删除的元素作为返回值返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result = arr.<span class="title function_">shift</span>();</span><br><span class="line">result = arr.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result = &quot;</span>+result);</span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p>可以用来从数组提取指定元素</p><p>该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p><p>参数：</p><ul><li>截取开始的位置的索引,包含开始索引</li><li>截取结束的位置的索引,不包含结束索引</li></ul><p>第二个参数可以省略不写,此时会截取从开始索引往后的所有元素</p><p>索引可以传递一个负值，如果传递一个负值，则从后往前计算</p><ul><li>-1 倒数第一个</li><li>-2 倒数第二个</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>,<span class="string">&quot;四&quot;</span>,<span class="string">&quot;五&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">4</span>);<span class="comment">//获取第一个元素之后到第四个元素的内容</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">slice</span>(<span class="number">1</span>);<span class="comment">//获取从第一个元素之后的所有元素</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">slice</span>(<span class="number">1</span>,-<span class="number">3</span>);<span class="comment">//获取第一个元素之后和倒数第三个元素之前的元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p>可以用于删除数组中的指定元素</p><p>使用splice()会影响到原数组，会将指定元素从原数组中删除</p><p>并将被删除的元素作为返回值返回</p><p>参数：</p><ul><li>第一个，表示开始位置的索引</li><li>第二个，表示删除的数量</li><li>第三个及以后，可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>,<span class="string">&quot;四&quot;</span>,<span class="string">&quot;五&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">3</span>);<span class="comment">//从第一个元素之后的三个元素都删除</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">splice</span>(<span class="number">1</span>);<span class="comment">//只删除该元素</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="string">&quot;六&quot;</span>,<span class="string">&quot;七&quot;</span>,<span class="string">&quot;八&quot;</span>);<span class="comment">//删除从第一个元素之后的三个元素，并在删除的元素位置加上后面的参数元素。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;创建一个数组&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--数组</title>
    <link href="https://zaesky.github.io/2022/05/01/javascript-%E6%95%B0%E7%BB%84/"/>
    <id>https://zaesky.github.io/2022/05/01/javascript-%E6%95%B0%E7%BB%84/</id>
    <published>2022-05-01T10:58:03.000Z</published>
    <updated>2022-05-02T07:16:37.729Z</updated>
    
    <content type="html"><![CDATA[<h5 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h5><p>数组也是一个对象<br>它和我们普通对象功能类似，也是用来存储一些值的<br>不同的是普通对象是使用字符串作为属性名的，<br>而数组时使用数字来作为索引操作元素</p><h5 id="索引："><a href="#索引：" class="headerlink" title="索引："></a>索引：</h5><p>从0开始的整数就是索引<br>数组的存储性能比普通对象要好，在开发中我们经常使用数组来存储一些数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数组对象</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用typeof检查一个数组时，会返回object</span></span><br><span class="line"><span class="comment">//console.log(typeof arr);</span></span><br><span class="line"></span><br><span class="line">/</span><br><span class="line">  向数组中添加元素</span><br><span class="line">  语法：数组[索引] = 值</span><br><span class="line"> /</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">33</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">22</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">44</span>;</span><br><span class="line">/arr[<span class="number">10</span>] = <span class="number">31</span>;</span><br><span class="line">arr[<span class="number">100</span>] = <span class="number">90</span>;/</span><br><span class="line"></span><br><span class="line">/</span><br><span class="line">  读取数组中的元素</span><br><span class="line">  语法：数组[索引]</span><br><span class="line">  如果读取不存在的索引，他不会报错而是返回<span class="literal">undefined</span></span><br><span class="line"> /</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(arr[3]);</span></span><br><span class="line"></span><br><span class="line">/</span><br><span class="line">  获取数组的长度</span><br><span class="line">  可以使用length属性来获取数组的长度(元素的个数)</span><br><span class="line">  语法：数组.<span class="property">length</span></span><br><span class="line">  </span><br><span class="line">  对于连续的数组，使用length可以获取到数组的长度（元素的个数）</span><br><span class="line">  对于非连续的数组，使用length会获取到数组的最大的索引+<span class="number">1</span></span><br><span class="line">  尽量不要创建非连续的数组</span><br><span class="line"> /</span><br><span class="line">/<span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);/</span><br><span class="line"></span><br><span class="line">/</span><br><span class="line">  修改length</span><br><span class="line">  如果修改的length大于原长度，则多出部分会空出来</span><br><span class="line">   如果修改的length小于原长度，则多出的元素会被删除</span><br><span class="line"> /</span><br><span class="line"><span class="comment">//arr.length = 10;</span></span><br><span class="line"></span><br><span class="line">/arr.<span class="property">length</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line">arr[<span class="number">4</span>] = <span class="number">50</span>;</span><br><span class="line">arr[<span class="number">5</span>] = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向数组的最后一个位置添加元素</span></span><br><span class="line"><span class="comment">//语法：数组[数组.length] = 值;</span></span><br><span class="line">arr[arr.<span class="property">length</span>] = <span class="number">70</span>;</span><br><span class="line">arr[arr.<span class="property">length</span>] = <span class="number">80</span>;</span><br><span class="line">arr[arr.<span class="property">length</span>] = <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">//创建一个数组</span></span><br><span class="line">      <span class="comment">//var arr = new Array();</span></span><br><span class="line">      <span class="comment">//使用字面量来创建数组</span></span><br><span class="line"><span class="comment">//语法:[]</span></span><br><span class="line"><span class="comment">//var arr = [];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(typeof arr);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用字面量创建数组时，可以在创建时就指定数组中的元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(arr[3]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用构造函数创建数组时，也可以同时添加元素，将要添加的元素作文构造函数的参数传递</span></span><br><span class="line"><span class="comment">//元素之间使用,隔开</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"><span class="comment">//console.log(arr2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个数组数组中只有一个元素10</span></span><br><span class="line">arr = [<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个长度为10的数组</span></span><br><span class="line">arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(arr2.length);</span></span><br><span class="line"><span class="comment">//数组中的元素可以是任意的数据类型</span></span><br><span class="line">arr = [<span class="string">&quot;hello&quot;</span>,<span class="number">1</span>,<span class="literal">true</span>,<span class="literal">null</span>,<span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以是对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>&#125;;</span><br><span class="line">arr[arr.<span class="property">length</span>] = obj;</span><br><span class="line">arr = [&#123;<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;沙和尚&quot;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以是一个函数</span></span><br><span class="line">arr = [<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="number">1</span>)&#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="number">2</span>)&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(arr);</span></span><br><span class="line"><span class="comment">//arr[0]();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组中也可以放数组，如下这种数组我们称为二维数组</span></span><br><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;数组（Array）&quot;&gt;&lt;a href=&quot;#数组（Array）&quot; class=&quot;headerlink&quot; title=&quot;数组（Array）&quot;&gt;&lt;/a&gt;数组（Array）&lt;/h5&gt;&lt;p&gt;数组也是一个对象&lt;br&gt;它和我们普通对象功能类似，也是用来存储一些值的&lt;br&gt;不同的</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--toString</title>
    <link href="https://zaesky.github.io/2022/04/29/javascript-toString/"/>
    <id>https://zaesky.github.io/2022/04/29/javascript-toString/</id>
    <published>2022-04-29T12:37:17.000Z</published>
    <updated>2022-04-29T12:47:37.567Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function Person(name , age , gender)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">this.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//修改Person原型的toString</span><br><span class="line">Person.prototype.toString = function()&#123;</span><br><span class="line">return &quot;Person[name=&quot;+this.name+&quot;,age=&quot;+this.age+&quot;,gender=&quot;+this.gender+&quot;]&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建一个Person实例</span><br><span class="line">var per = new Person(&quot;孙悟空&quot;,18,&quot;男&quot;);</span><br><span class="line">var per2 = new Person(&quot;猪八戒&quot;,28,&quot;男&quot;);</span><br><span class="line"></span><br><span class="line">//当我们直接在页面中打印一个对象时，事件上是输出的对象的toString()方法的返回值</span><br><span class="line">//如果我们希望在输出对象时不输出[object Object]，可以为对象添加一个toString()方法</span><br><span class="line">//Person[name=孙悟空,age=18,gender=男]</span><br><span class="line">/*per.toString = function()&#123;</span><br><span class="line">return &quot;Person[name=&quot;+this.name+&quot;,age=&quot;+this.age+&quot;,gender=&quot;+this.gender+&quot;]&quot;;</span><br><span class="line">&#125;;*/</span><br><span class="line"></span><br><span class="line">var result = per.toString();</span><br><span class="line">//console.log(&quot;result = &quot; + result);</span><br><span class="line">//console.log(per.__proto__.__proto__.hasOwnProperty(&quot;toString&quot;));</span><br><span class="line">console.log(per2);</span><br><span class="line">console.log(per);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--原型</title>
    <link href="https://zaesky.github.io/2022/04/29/javascript-%E5%8E%9F%E5%9E%8B/"/>
    <id>https://zaesky.github.io/2022/04/29/javascript-%E5%8E%9F%E5%9E%8B/</id>
    <published>2022-04-29T12:03:14.000Z</published>
    <updated>2022-04-29T12:34:25.364Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原型-prototype"><a href="#原型-prototype" class="headerlink" title="原型 prototype"></a>原型 prototype</h4><p>我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype</p><p>这个属性对应着一个对象，这个对象就是我们所谓的原型对象</p><p>如果函数作为普通函数调用prototype没有任何作用</p><p>当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，我们可以通过proto来访问该属性。</p><p>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，我们可以将对象中共有的内容，统一设置到原型对象中。<br>当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。</p><p> 以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中，这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function MyClass()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//向MyClass的原型中添加属性a</span><br><span class="line">MyClass.prototype.a = 123;</span><br><span class="line"></span><br><span class="line">//向MyClass的原型中添加一个方法</span><br><span class="line">MyClass.prototype.sayHello = function()&#123;</span><br><span class="line">alert(&quot;hello&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var mc = new MyClass();</span><br><span class="line"></span><br><span class="line">var mc2 = new MyClass();</span><br><span class="line"></span><br><span class="line">//console.log(MyClass.prototype);</span><br><span class="line">//console.log(mc2.__proto__ == MyClass.prototype);</span><br><span class="line"></span><br><span class="line">//向mc中添加a属性</span><br><span class="line">mc.a = &quot;我是mc中的a&quot;;</span><br><span class="line"></span><br><span class="line">//console.log(mc2.a);</span><br><span class="line"></span><br><span class="line">mc.sayHello();</span><br></pre></td></tr></table></figure><p>创建一个构造函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function MyClass()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//向MyClass的原型中添加一个name属性</span><br><span class="line">MyClass.prototype.name = &quot;我是原型中的名字&quot;;</span><br><span class="line"></span><br><span class="line">var mc = new MyClass();</span><br><span class="line">mc.age = 18;</span><br><span class="line"></span><br><span class="line">//console.log(mc.name);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true</span><br><span class="line">//console.log(&quot;name&quot; in mc);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性</span><br><span class="line">//使用该方法只有当对象自身中含有属性时，才会返回true</span><br><span class="line">//console.log(mc.hasOwnProperty(&quot;age&quot;));</span><br><span class="line"></span><br><span class="line">//console.log(mc.hasOwnProperty(&quot;hasOwnProperty&quot;));</span><br></pre></td></tr></table></figure><p>原型对象也是对象，所以它也有原型，当我们使用一个对象的属性或方法时，会现在自身中寻找，自身中如果有，则直接使用，如果没有则去原型对象中寻找，如果原型对象中有，则使用，如果没有则去原型的原型中寻找,直到找到Object对象的原型，Object对象的原型没有原型，如果在Object原型中依然没有找到，则返回undefined。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;原型-prototype&quot;&gt;&lt;a href=&quot;#原型-prototype&quot; class=&quot;headerlink&quot; title=&quot;原型 prototype&quot;&gt;&lt;/a&gt;原型 prototype&lt;/h4&gt;&lt;p&gt;我们所创建的每一个函数，解析器都会向函数中添加一个属性pro</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--构造函数</title>
    <link href="https://zaesky.github.io/2022/04/29/javascript-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://zaesky.github.io/2022/04/29/javascript-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</id>
    <published>2022-04-29T11:24:30.000Z</published>
    <updated>2022-04-29T11:50:46.476Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个构造函数，专门用来创建Person对象的</p><p>构造函数就是一个普通的函数，创建方式和普通函数没有区别,</p><p>不同的是构造函数习惯上首字母大写</p><p>构造函数和普通函数的区别就是调用方式的不同</p><p>普通函数是直接调用，而构造函数需要使用new关键字来调用</p><h3 id="构造函数的执行流程"><a href="#构造函数的执行流程" class="headerlink" title="构造函数的执行流程"></a>构造函数的执行流程</h3><ul><li>立刻创建一个新的对象</li><li>将新建的对象设置为函数中this,在构造函数中可以使用this来引用新建的对象</li><li>逐行执行函数中的代码</li><li>将新建的对象作为返回值返回</li></ul><p>使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个类。</p><p>我们将通过一个构造函数创建的对象，称为是该类的实例</p><h3 id="this的情况"><a href="#this的情况" class="headerlink" title="this的情况"></a>this的情况</h3><ul><li><p>当以函数的形式调用时，this是window</p></li><li><p>当以方法的形式调用时，谁调用方法this就是谁</p></li><li><p>当以构造函数的形式调用时，this就是新创建的那个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name , age , gender</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;玉兔精&quot;</span>,<span class="number">16</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> per3 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;奔波霸&quot;</span>,<span class="number">38</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*console.log(per);</span></span><br><span class="line"><span class="comment">console.log(dog);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用instanceof可以检查一个对象是否是一个类的实例</span></span><br><span class="line"><span class="comment"> * 语法：</span></span><br><span class="line"><span class="comment"> * 对象 instanceof 构造函数</span></span><br><span class="line"><span class="comment"> * 如果是，则返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//console.log(per instanceof Person);</span></span><br><span class="line"><span class="comment">//console.log(dog instanceof Person);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 所有的对象都是Object的后代，</span></span><br><span class="line"><span class="comment"> * 所以任何对象和Object左instanceof检查时都会返回true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//console.log(dog instanceof Object);</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建一个Person构造函数</span></span><br><span class="line"><span class="comment"> * - 在Person构造函数中，为每一个对象都添加了一个sayName方法，</span></span><br><span class="line"><span class="comment"> * 目前我们的方法是在构造函数内部创建的，</span></span><br><span class="line"><span class="comment"> * 也就是构造函数每执行一次就会创建一个新的sayName方法</span></span><br><span class="line"><span class="comment"> * 也是所有实例的sayName都是唯一的。</span></span><br><span class="line"><span class="comment"> * 这样就导致了构造函数执行一次就会创建一个新的方法，</span></span><br><span class="line"><span class="comment"> * 执行10000次就会创建10000个新的方法，而10000个方法都是一摸一样的</span></span><br><span class="line"><span class="comment"> * 这是完全没有必要，完全可以使所有的对象共享同一个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name , age , gender</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line"><span class="comment">//向对象中添加一个方法</span></span><br><span class="line"><span class="comment">//this.sayName = fun;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将sayName方法在全局作用域中定义</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将函数定义在全局作用域，污染了全局作用域的命名空间</span></span><br><span class="line"><span class="comment"> * 而且定义在全局作用域中也很不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*function fun()&#123;</span></span><br><span class="line"><span class="comment">alert(&quot;Hello大家好，我是:&quot;+this.name);</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="comment">//向原型中添加sayName方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;Hello大家好，我是:&quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Person的实例</span></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">28</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">per.<span class="title function_">sayName</span>();</span><br><span class="line">per2.<span class="title function_">sayName</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(per.sayName == per2.sayName);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;创建一个构造函数，专门用来创建Person对象的&lt;/p&gt;
&lt;p&gt;构造函数就是一个普通的函数，创建方式和普通函数没有区别,&lt;/p&gt;
&lt;p&gt;不同的是构造函数习惯上首字母大写&lt;/p&gt;
&lt;p&gt;构造函数和普通函数的区别就是调用方式的不同&lt;/p&gt;
&lt;p&gt;普通函数是直接调用，而构造函数需</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--对象（3）</title>
    <link href="https://zaesky.github.io/2022/04/21/javascript-%E5%AF%B9%E8%B1%A1%EF%BC%883%EF%BC%89/"/>
    <id>https://zaesky.github.io/2022/04/21/javascript-%E5%AF%B9%E8%B1%A1%EF%BC%883%EF%BC%89/</id>
    <published>2022-04-21T14:06:45.000Z</published>
    <updated>2022-04-21T14:10:21.866Z</updated>
    
    <content type="html"><![CDATA[<h4 id="普通创建对象方法"><a href="#普通创建对象方法" class="headerlink" title="普通创建对象方法"></a>普通创建对象方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建一个对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">        <span class="attr">gender</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="attr">sayName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h4 id="使用工厂方法创建对象"><a href="#使用工厂方法创建对象" class="headerlink" title="使用工厂方法创建对象"></a>使用工厂方法创建对象</h4><p>通过该方法可以大批量的创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name , age ,gender</span>)&#123;</span><br><span class="line"><span class="comment">//创建一个新的对象 </span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="comment">//向对象中添加属性</span></span><br><span class="line">obj.<span class="property">name</span> = name;</span><br><span class="line">obj.<span class="property">age</span> = age;</span><br><span class="line">obj.<span class="property">gender</span> = gender;</span><br><span class="line">obj.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//将新的对象返回</span></span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 用来创建狗的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createDog</span>(<span class="params">name , age</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">name</span> = name;</span><br><span class="line">obj.<span class="property">age</span> = age;</span><br><span class="line">obj.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;汪汪~~&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title function_">createPerson</span>(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">28</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="title function_">createPerson</span>(<span class="string">&quot;白骨精&quot;</span>,<span class="number">16</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj4 = <span class="title function_">createPerson</span>(<span class="string">&quot;蜘蛛精&quot;</span>,<span class="number">18</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用工厂方法创建的对象，使用的构造函数都是Object</span></span><br><span class="line"><span class="comment"> * 所以创建的对象都是Object这个类型，</span></span><br><span class="line"><span class="comment"> * 就导致我们无法区分出多种不同类型的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//创建一个狗的对象</span></span><br><span class="line"><span class="keyword">var</span> dog = <span class="title function_">createDog</span>(<span class="string">&quot;旺财&quot;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj4);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;普通创建对象方法&quot;&gt;&lt;a href=&quot;#普通创建对象方法&quot; class=&quot;headerlink&quot; title=&quot;普通创建对象方法&quot;&gt;&lt;/a&gt;普通创建对象方法&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--this关键字</title>
    <link href="https://zaesky.github.io/2022/04/21/javascript-this%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://zaesky.github.io/2022/04/21/javascript-this%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2022-04-21T13:54:50.000Z</published>
    <updated>2022-04-21T13:58:32.969Z</updated>
    
    <content type="html"><![CDATA[<p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数</p><p>这个隐含的参数就是this，this指向的是一个对象。</p><p>这个对象我们称为函数执行的 上下文对象。</p><p>根据函数的调用方式的不同，this会指向不同的对象</p><p>1.以函数的形式调用时，this永远都是window</p><p>2.以方法的形式调用时，this就是调用方法的那个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个name变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;全局&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个fun()函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建两个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line"><span class="attr">sayName</span>:fun</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;沙和尚&quot;</span>,</span><br><span class="line"><span class="attr">sayName</span>:fun</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们希望调用obj.sayName()时可以输出obj的名字</span></span><br><span class="line"><span class="comment">//obj.sayName();</span></span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;解析器在调用函数每次都会向函数内部传递进一个隐含的参数&lt;/p&gt;
&lt;p&gt;这个隐含的参数就是this，this指向的是一个对象。&lt;/p&gt;
&lt;p&gt;这个对象我们称为函数执行的 上下文对象。&lt;/p&gt;
&lt;p&gt;根据函数的调用方式的不同，this会指向不同的对象&lt;/p&gt;
&lt;p&gt;1.以函数的</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--变量的声明提前</title>
    <link href="https://zaesky.github.io/2022/04/21/javascript-%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E%E6%8F%90%E5%89%8D/"/>
    <id>https://zaesky.github.io/2022/04/21/javascript-%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E%E6%8F%90%E5%89%8D/</id>
    <published>2022-04-21T13:38:02.000Z</published>
    <updated>2022-04-21T13:41:01.072Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量的声明提前"><a href="#变量的声明提前" class="headerlink" title="变量的声明提前"></a>变量的声明提前</h3><p>使用var关键字声明的变量，会在所有的代码执行之前被声明（但是不会赋值），<br>但是如果声明变量时不适用var关键字，则变量不会被声明提前</p><h3 id="函数的声明提前"><a href="#函数的声明提前" class="headerlink" title="函数的声明提前"></a>函数的声明提前</h3><p>使用函数声明形式创建的函数 function 函数(){}<br>它会在所有的代码执行之前就被创建，所以我们可以在函数声明前来调用函数<br>使用函数表达式创建的函数，不会被声明提前，所以不能在声明前调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//函数声明，会被提前创建</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是一个fun函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数表达式，不会被提前创建</span></span><br><span class="line"><span class="keyword">var</span> fun2 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是fun2函数&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun2</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;变量的声明提前&quot;&gt;&lt;a href=&quot;#变量的声明提前&quot; class=&quot;headerlink&quot; title=&quot;变量的声明提前&quot;&gt;&lt;/a&gt;变量的声明提前&lt;/h3&gt;&lt;p&gt;使用var关键字声明的变量，会在所有的代码执行之前被声明（但是不会赋值），&lt;br&gt;但是如果声明变量时</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript作用域（scope）</title>
    <link href="https://zaesky.github.io/2022/04/15/javascript-%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%88scope%EF%BC%89/"/>
    <id>https://zaesky.github.io/2022/04/15/javascript-%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%88scope%EF%BC%89/</id>
    <published>2022-04-15T13:42:14.418Z</published>
    <updated>2022-04-21T13:34:59.395Z</updated>
    
    <content type="html"><![CDATA[<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a><strong>作用域</strong></h3><p><strong>作用域指一个变量的作用的范围</strong></p><p>在JS中一共有两种作用域：</p><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><ol><li>直接编写在script标签中的JS代码，都在全局作用域</li><li>全局作用域在页面打开时创建，在页面关闭时销毁</li><li>在全局作用域中有一个全局对象window，</li><li>它代表的是一个浏览器的窗口，它由浏览器创建我们可以直接使用</li></ol><p>在全局作用域中：</p><ol><li>创建的变量都会作为window对象的属性保存</li><li>创建的函数都会作为window对象的方法保存</li><li>全局作用域中的变量都是全局变量</li><li>在页面的任意的部分都可以访问的到</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">c</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是fun函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//window.fun();</span></span><br><span class="line">    <span class="comment">//window.alert(&quot;hello&quot;);</span></span><br></pre></td></tr></table></figure><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁</p><p>每调用一次函数就会创建一个新的函数作用域，他们之间是互相独立的</p><p><strong>在函数作用域中可以访问到全局作用域的变量</strong></p><p><strong>在全局作用域中无法访问到函数作用域的变量</strong></p><p>当在函数作用域操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用</p><p>如果没有则向上一级作用域中寻找，直到找到全局作用域，</p><p>如果全局作用域中依然没有找到，则会报错ReferenceError</p><p>在函数中要访问全局变量可以使用window对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;我是fun函数中的变量a&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(&quot;a = &quot;+a);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>+<span class="variable language_">window</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun2</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fun();</span></span><br><span class="line"><span class="comment">//console.log(&quot;b = &quot;+b);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在函数作用域也有声明提前的特性，</span></span><br><span class="line"><span class="comment"> * 使用var关键字声明的变量，会在函数中所有的代码执行之前被声明</span></span><br><span class="line"><span class="comment"> * 函数声明也会在函数中所有的代码执行之前执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun3</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun4</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(a);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun4</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;I&#x27;m fun4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fun3();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在函数中，不适用var声明的变量都会成为全局变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun5</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//console.log(&quot;c = &quot;+c);</span></span><br><span class="line"><span class="comment">//c = 10;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//d没有使用var关键字，则会设置为全局变量</span></span><br><span class="line">d = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun5</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//在全局输出c</span></span><br><span class="line"><span class="comment">//console.log(&quot;d = &quot;+d);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义形参就相当于在函数作用域中声明了变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun6</span>(<span class="params">e</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun6</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;&lt;strong&gt;作用域&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;作用域指一个变量的作用的范围&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在JS中一共有两种作</summary>
      
    
    
    
    
    <category term="js js基础" scheme="https://zaesky.github.io/tags/js-js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--枚举对象中的属性</title>
    <link href="https://zaesky.github.io/2022/04/15/javascript-%E6%9E%9A%E4%B8%BE%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
    <id>https://zaesky.github.io/2022/04/15/javascript-%E6%9E%9A%E4%B8%BE%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7/</id>
    <published>2022-04-15T13:33:08.000Z</published>
    <updated>2022-04-15T13:36:19.921Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>:<span class="string">&quot;花果山&quot;</span></span><br><span class="line">     &#125;;</span><br></pre></td></tr></table></figure><h4 id="枚举对象中的属性"><a href="#枚举对象中的属性" class="headerlink" title="枚举对象中的属性"></a>枚举对象中的属性</h4><p>使用for … in 语句</p><p>语法：</p><blockquote><p>for(var 变量 in 对象){</p><p> }</p></blockquote><p>for…in语句 对象中有几个属性，循环体就会执行几次</p><p>每次执行时，会将对象中的一个属性的名字赋值给变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;属性名:&quot;</span>+n);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;属性值:&quot;</span>+obj[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--对象（2）</title>
    <link href="https://zaesky.github.io/2022/04/15/javascript-%E5%AF%B9%E8%B1%A1%EF%BC%882%EF%BC%89/"/>
    <id>https://zaesky.github.io/2022/04/15/javascript-%E5%AF%B9%E8%B1%A1%EF%BC%882%EF%BC%89/</id>
    <published>2022-04-15T13:28:05.000Z</published>
    <updated>2022-04-15T13:31:51.995Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>向对象中添加属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>对象的属性值可以是任何的数据类型，也可以是个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(obj.sayName);</span></span><br><span class="line"><span class="comment">//调方法</span></span><br><span class="line">obj.<span class="title function_">sayName</span>();</span><br><span class="line"><span class="comment">//调函数</span></span><br><span class="line"><span class="comment">//fun();</span></span><br></pre></td></tr></table></figure><p>函数也可以称为对象的属性，如果一个函数作为一个对象的属性保存，那么我们称这个函数时这个对象的方法</p><p>调用这个函数就说调用对象的<code>方法（method）</code>但是它只是名称上的区别没有其他的区别。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line"><span class="attr">sayName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj2.<span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;创建一个对象&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--立即执行函数</title>
    <link href="https://zaesky.github.io/2022/04/13/javascript-%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://zaesky.github.io/2022/04/13/javascript-%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/</id>
    <published>2022-04-13T12:50:31.000Z</published>
    <updated>2022-04-13T12:53:11.743Z</updated>
    
    <content type="html"><![CDATA[<p>函数对象()</p><p>立即执行函数</p><p>函数定义完，立即被调用，这种函数叫做立即执行函数</p><p>立即执行函数往往只会执行一次</p><blockquote><p>(function(){</p><p>​    alert(“我是一个匿名函数~~~”);</p><p>​    })();</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span>+b);</span><br><span class="line">    &#125;)(<span class="number">123</span>,<span class="number">456</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;函数对象()&lt;/p&gt;
&lt;p&gt;立即执行函数&lt;/p&gt;
&lt;p&gt;函数定义完，立即被调用，这种函数叫做立即执行函数&lt;/p&gt;
&lt;p&gt;立即执行函数往往只会执行一次&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(function(){&lt;/p&gt;
&lt;p&gt;​    alert(“我是一个匿名函数~~</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--返回值（return）【实例】</title>
    <link href="https://zaesky.github.io/2022/04/13/javascript-%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%88return%EF%BC%89%E3%80%90%E5%AE%9E%E4%BE%8B%E3%80%91/"/>
    <id>https://zaesky.github.io/2022/04/13/javascript-%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%88return%EF%BC%89%E3%80%90%E5%AE%9E%E4%BE%8B%E3%80%91/</id>
    <published>2022-04-13T12:39:23.000Z</published>
    <updated>2022-04-13T12:46:24.124Z</updated>
    
    <content type="html"><![CDATA[<h3 id="判断是否为偶数"><a href="#判断是否为偶数" class="headerlink" title="判断是否为偶数"></a>判断是否为偶数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;函数要执行了~~~~&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;<span class="number">5</span> ; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//使用break可以退出当前的循环</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//continue用于跳过当次循环</span></span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line"><span class="comment">//使用return可以结束整个函数</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;函数执行完了~~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure><p>返回值可以是任意的数据类型</p><p>也可以是一个对象，也可以是一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//返回一个对象</span></span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">name</span>:<span class="string">&quot;沙和尚&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">fun2</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun3</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//在函数内部再声明一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun4</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;我是fun4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将fun4函数对象作为返回值返回</span></span><br><span class="line"><span class="keyword">return</span> fun4;</span><br><span class="line">a = <span class="title function_">fun3</span>();</span><br><span class="line"><span class="comment">//console.log(a);</span></span><br><span class="line"><span class="comment">//a();</span></span><br><span class="line"><span class="title function_">fun3</span>()();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;判断是否为偶数&quot;&gt;&lt;a href=&quot;#判断是否为偶数&quot; class=&quot;headerlink&quot; title=&quot;判断是否为偶数&quot;&gt;&lt;/a&gt;判断是否为偶数&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--返回值（return）</title>
    <link href="https://zaesky.github.io/2022/04/13/javascript-%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%88return%EF%BC%89/"/>
    <id>https://zaesky.github.io/2022/04/13/javascript-%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%88return%EF%BC%89/</id>
    <published>2022-04-13T12:27:18.000Z</published>
    <updated>2022-04-13T12:38:27.617Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>创建一个函数，用来计算三个数的和</strong></p><p>可以使用 return 来设置函数的返回值</p><p>语法：</p><blockquote><p>return 值</p></blockquote><ul><li><code>return</code>后的值将会会作为函数的执行结果返回</li><li>可以定义一个变量，来接收该结果</li><li>在函数中<code>return</code>后的语句都不会执行</li><li>如果<code>return</code>语句后不跟任何值就相当于返回一个<code>undefined</code></li><li>如果函数中不写<code>return</code>，则也会返回<code>undefined</code></li><li><code>return</code>后可以跟任意类型的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a , b , c</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(a + b +c);</span><br><span class="line">    <span class="keyword">var</span> d = a + b + c;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用函数</strong></p><ul><li>变量result的值就是函数的执行结果</li><li>函数返回什么result的值就是什么</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="title function_">sum</span>(<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result = &quot;</span>+result);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; &lt;strong&gt;创建一个函数，用来计算三个数的和&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用 return 来设置函数的返回值&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;return 值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--函数的参数</title>
    <link href="https://zaesky.github.io/2022/04/13/javascript-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/"/>
    <id>https://zaesky.github.io/2022/04/13/javascript-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</id>
    <published>2022-04-13T12:13:30.000Z</published>
    <updated>2022-04-13T12:24:18.432Z</updated>
    
    <content type="html"><![CDATA[<h4 id="定义一个用来求两个数和的函数"><a href="#定义一个用来求两个数和的函数" class="headerlink" title="定义一个用来求两个数和的函数"></a>定义一个用来求两个数和的函数</h4><ul><li>可以在函数的<code>()</code>中来指定一个或多个形参（形式参数）</li><li>多个形参之间使用<code>,</code>隔开，声明形参就相当于在函数内部声明了对应的变量</li><li>但是并不赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span>+b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在调用函数时，可以在<code>()</code>中指定实参（实际参数）</p><p>实参将会赋值给函数中对应的形参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>,<span class="number">456</span>);</span><br></pre></td></tr></table></figure><p><strong>调用函数时解析器不会检查实参的类型，所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型的检查。</strong></p><p>函数的实参可以是任意的数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="literal">true</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>调用函数时，解析器也不会检查实参的数量</p><p>多余实参不会被赋值</p><p>如果实参的数量少于形参的数量，则没有对应实参的形参将是 <strong>undefined</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>,<span class="number">456</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">true</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;定义一个用来求两个数和的函数&quot;&gt;&lt;a href=&quot;#定义一个用来求两个数和的函数&quot; class=&quot;headerlink&quot; title=&quot;定义一个用来求两个数和的函数&quot;&gt;&lt;/a&gt;定义一个用来求两个数和的函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可以在函数的&lt;code&gt;()&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript--函数</title>
    <link href="https://zaesky.github.io/2022/04/13/javascript-%E5%87%BD%E6%95%B0/"/>
    <id>https://zaesky.github.io/2022/04/13/javascript-%E5%87%BD%E6%95%B0/</id>
    <published>2022-04-13T12:00:58.000Z</published>
    <updated>2022-04-13T12:27:03.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数-function"><a href="#函数-function" class="headerlink" title="函数 function"></a>函数 function</h3><ul><li>函数也是一个对象</li><li>函数中可以封装一些功能（代码），在需要时可以执行这些功能（代码）</li><li>函数中可以保存一些代码在需要的时候调用</li><li>使用typeof检查一个函数对象时，会返回function</li></ul><h4 id="创建一个函数对象"><a href="#创建一个函数对象" class="headerlink" title="创建一个函数对象"></a>创建一个函数对象</h4><p>可以将要封装的代码以字符串的形式传递给构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;console.log(&#x27;Hello 这是我的第一个函数&#x27;);&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>我们在实际开发中很少使用构造函数来创建一个函数对象。</p></blockquote><p>封装到函数中的代码不会立即执行</p><p>函数中的代码会在函数调用的时候执行</p><p>调用函数 语法：</p><blockquote><p>函数对象()</p></blockquote><p>当调用函数时，函数中封装的代码会按照顺序执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure><p>使用 <strong>函数声明</strong> 来创建一个函数</p><p>语法：</p><blockquote><p>function 函数名([形参1,形参2…形参N]){<br>    语句…<br>}</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是我的第二个函数~&quot;</span>);</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;哈哈哈哈哈&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;(&gt;_&lt;)~~&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 使用 <strong>函数表达式</strong> 来创建一个函数</p><blockquote><p>var 函数名  &#x3D; function([形参1,形参2…形参N]){<br>            语句….<br>            }</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun3 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是匿名函数中封装的代码&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">fun3</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;函数-function&quot;&gt;&lt;a href=&quot;#函数-function&quot; class=&quot;headerlink&quot; title=&quot;函数 function&quot;&gt;&lt;/a&gt;函数 function&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数也是一个对象&lt;/li&gt;
&lt;li&gt;函数中可以封装一些功</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript--对象字面量</title>
    <link href="https://zaesky.github.io/2022/04/12/JavaScript-%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F/"/>
    <id>https://zaesky.github.io/2022/04/12/JavaScript-%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F/</id>
    <published>2022-04-12T11:24:01.000Z</published>
    <updated>2022-04-12T11:40:17.568Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>使用对象字面量来创建一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> obj);</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>使用对象字面量，可以在创建对象时，直接指定对象中的属性</p><p>语法：</p><blockquote><p>{属性名:属性值,属性名:属性值….}</p></blockquote><p>对象字面量的属性名可以加引号也可以不加，建议不加。</p><ul><li><p>如果要使用一些特殊的名字，则必须加引号</p></li><li><p>属性名和属性值是一组一组的名值对结构</p></li><li><p>名和值之间使用:连接，多个名值对之间使用<code>,</code>隔开</p></li><li><pre><code>如果一个属性之后没有其他的属性了，就不要写</code></pre> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">13</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="attr">test</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;沙僧&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">test</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;创建一个对象&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript--基本数据类型和引用数据类型</title>
    <link href="https://zaesky.github.io/2022/04/12/JavaScript-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://zaesky.github.io/2022/04/12/JavaScript-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-04-12T11:23:06.000Z</published>
    <updated>2022-04-12T11:33:00.273Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li>String</li><li>Number </li><li>Boolean </li><li>Null </li><li>Undefined</li></ul><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul><li>Object</li></ul><p>JS中的变量都是保存到栈内存中的，基本数据类型的值直接在栈内存中存储，值与值之间是独立存在，修改一个变量不会影响其他的变量。</p><p>对象是保存到堆内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间，而变量保存的是对象的内存地址（对象的引用），如果两个变量保存的是同一个对象引用，当一个通过一个变量修改属性时，另一个也会受到影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">    a++;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span>+b);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = obj;</span><br><span class="line"><span class="comment">//修改obj的name属性</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;猪八戒&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置obj2为null</span></span><br><span class="line">obj2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c == d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj4 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj3.<span class="property">name</span> = <span class="string">&quot;沙和尚&quot;</span>;</span><br><span class="line">obj4.<span class="property">name</span> = <span class="string">&quot;沙和尚&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj4);</span><br></pre></td></tr></table></figure><p>当比较两个基本数据类型的值时，就是比较值。<br>而比较两个引用数据类型时，它是比较的对象的内存地址。<br>如果两个对象是一摸一样的，但是地址不同，它也会返回false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3 == obj4);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number &lt;/li&gt;
&lt;li&gt;Boolean &lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript--属性名与属性值</title>
    <link href="https://zaesky.github.io/2022/04/12/JavaScript-%E5%B1%9E%E6%80%A7%E5%90%8D%E4%B8%8E%E5%B1%9E%E6%80%A7%E5%80%BC/"/>
    <id>https://zaesky.github.io/2022/04/12/JavaScript-%E5%B1%9E%E6%80%A7%E5%90%8D%E4%B8%8E%E5%B1%9E%E6%80%A7%E5%80%BC/</id>
    <published>2022-04-12T11:04:02.000Z</published>
    <updated>2022-04-12T11:19:56.833Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><h3 id="向对象中添加属性"><a href="#向对象中添加属性" class="headerlink" title="向对象中添加属性"></a>向对象中添加属性</h3><pre><code> * 属性名： - 对象的属性名不强制要求遵守标识符的规范- 什么乱七八糟的名字都可以使用- 但是我们使用是还是尽量按照标识符的规范去做</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line">obj.<span class="property">var</span> = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>如果要使用特殊的属性名，不能采用<code>.</code>的方式来操作</strong><br>需要使用另一种方式：<br>语法：</p><blockquote><p>对象[“属性名”] &#x3D; 属性值</p></blockquote><p>读取时也需要采用这种方式<br>使用<code>[]</code>这种形式去操作属性，更加的灵活<br>在<code>[]</code>中可以直接传递一个变量，这样变量值是多少就会读取那个属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj[<span class="string">&quot;123&quot;</span>] = <span class="number">789</span>;</span><br><span class="line">obj[<span class="string">&quot;nihao&quot;</span>] = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="string">&quot;nihao&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&quot;123&quot;</span>]);</span><br></pre></td></tr></table></figure><h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3><ul><li><p>JS对象的属性值，可以是任意的数据类型</p></li><li><p>甚至也可以是一个对象</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">test</span> = <span class="literal">true</span>;</span><br><span class="line">obj.<span class="property">test</span> = <span class="literal">null</span>;</span><br><span class="line">obj.<span class="property">test</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;猪八戒&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将obj2设置为obj的属性</span></span><br><span class="line">obj.<span class="property">test</span> = obj2;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">test</span>.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><h3 id="in-运算符"><a href="#in-运算符" class="headerlink" title="in 运算符"></a>in 运算符</h3><p>通过该运算符可以检查一个对象中是否含有指定的属性</p><p><strong>如果有则返回true，没有则返回false</strong></p><p>语法：</p><blockquote><p>“属性名” in 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查obj中是否含有test2属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test2&quot;</span> <span class="keyword">in</span> obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span> <span class="keyword">in</span> obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> obj);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
    <category term="属性" scheme="https://zaesky.github.io/tags/%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript--对象</title>
    <link href="https://zaesky.github.io/2022/04/12/JavaScript-%E5%AF%B9%E8%B1%A1/"/>
    <id>https://zaesky.github.io/2022/04/12/JavaScript-%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-04-12T09:39:58.000Z</published>
    <updated>2022-04-12T10:00:21.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS中数据类型"><a href="#JS中数据类型" class="headerlink" title="JS中数据类型"></a>JS中数据类型</h3><p><strong>String 字符串</strong><br><strong>Number 数值</strong><br><strong>Boolean 布尔值</strong><br><strong>Null 空值</strong><br><strong>Undefined 未定义</strong><br>以上这五种类型属于基本数据类型，以后我们看到的值只要不是上边的5种，全都是对象</p><h4 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a><strong>Object 对象</strong></h4><p>基本数据类型都是单一的值”hello” 123 true<br>值和值之间没有任何的联系。</p><p>在JS中来表示一个人的信息（name gender age）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> gender = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>如果使用基本数据类型的数据，我们所创建的变量都是独立，不能成为一个整体。<br>对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</p><h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><h4 id="1-内建对象"><a href="#1-内建对象" class="headerlink" title="1.内建对象"></a><strong>1.内建对象</strong></h4><p>由ES标准中定义的对象，在任何的ES的实现中都可以使用</p><p>比如：Math String Number Boolean Function Object….</p><h4 id="2-宿主对象"><a href="#2-宿主对象" class="headerlink" title="2.宿主对象"></a>2.宿主对象</h4><p>由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象</p><p>比如 BOM DOM</p><h4 id="3-自定义对象"><a href="#3-自定义对象" class="headerlink" title="3.自定义对象"></a>3.自定义对象</h4><p>由开发人员自己创建的对象</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>使用new关键字调用的函数，是构造函数constructor</p><p>构造函数是专门用来创建对象的函数</p><p>使用typeof检查一个对象时，会返回object</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>在对象中保存的值称为属性<br>向对象添加属性</p><blockquote><p>语法：对象.属性名 &#x3D; 属性值;</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向obj中添加一个name属性</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line"><span class="comment">//向obj中添加一个gender属性</span></span><br><span class="line">obj.<span class="property">gender</span> = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="comment">//向obj中添加一个age属性</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><h4 id="读取对象中的属性"><a href="#读取对象中的属性" class="headerlink" title="读取对象中的属性"></a>读取对象中的属性</h4><p>语法：</p><blockquote><p>对象.属性名</p></blockquote><p><strong>如果读取对象中没有的属性，不会报错而是会返回undefined</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">gender</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">hello</span>);</span><br></pre></td></tr></table></figure><h4 id="修改对象的属性值"><a href="#修改对象的属性值" class="headerlink" title="修改对象的属性值"></a>修改对象的属性值</h4><p>语法：</p><blockquote><p>对象.属性名 &#x3D; 新值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;tom&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h4><p>语法：</p><blockquote><p>delete 对象.属性名</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JS中数据类型&quot;&gt;&lt;a href=&quot;#JS中数据类型&quot; class=&quot;headerlink&quot; title=&quot;JS中数据类型&quot;&gt;&lt;/a&gt;JS中数据类型&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;String 字符串&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Number 数值&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>算法设计与分析--最大字段和问题【动态规划法】</title>
    <link href="https://zaesky.github.io/2022/04/09/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E6%9C%80%E5%A4%A7%E5%AD%97%E6%AE%B5%E5%92%8C%E9%97%AE%E9%A2%98%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B3%95%E3%80%91/"/>
    <id>https://zaesky.github.io/2022/04/09/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E6%9C%80%E5%A4%A7%E5%AD%97%E6%AE%B5%E5%92%8C%E9%97%AE%E9%A2%98%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B3%95%E3%80%91/</id>
    <published>2022-04-09T07:39:50.000Z</published>
    <updated>2022-04-09T08:10:26.688Z</updated>
    
    <content type="html"><![CDATA[<h5 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h5><blockquote><p>什么是最大字段和问题？</p></blockquote><p><strong>给定由 n 个整数（可能为负整数）组成的序列a1，a2，a3…an，求该数列中连续子段和最大！</strong></p><p>  例如：当（a1，a2，a3，a4，a5）&#x3D;（-2,11，-4,13，-5，-2）时，最大字段和为 20 （11 + (-4) + 13）;</p><h5 id="条件递推"><a href="#条件递推" class="headerlink" title="条件递推"></a>条件递推</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/806c0446f60541c795e29db3d7b29e94.png"                      alt="img"                ></p><blockquote><p>D[i]表示从i开始的最大字段和。（但我们不是从前往后找字段结束位置）<br>根据递推公式，我们可知要想求得D[i],就必须知道D[i+1],所以我们从前往后计算。<br>如下图：以i&#x3D;12开始的子段和D[12]&#x3D;X[12]&#x3D;-1，该子段结束位置Rec[12]&#x3D;i&#x3D;12；<br>当i&#x3D;11时，D[11+1]&lt;0,所以D[11]&#x3D;X[11]&#x3D;7,Rec[i]&#x3D;i&#x3D;11;<br>当i&#x3D;10时，D[10+1]&gt;0,所以D[10]&#x3D;X[10]+D[11]&#x3D;3+7,Rec&#x3D;i+1&#x3D;11;<br>…</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/99e6252580f94889a9b3148e2db41278.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Z2X5rS76L-H5p2l,size_20,color_FFFFFF,t_70,g_se,x_16"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/424a688ab7d04338a5ccb53fae23860f.png"                      alt="img"                ></p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态规划函数 接收数组和数组个数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dynamicPlan</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="comment">//定义三个数组</span></span><br><span class="line">    <span class="comment">//sum数组用于记录累加结果</span></span><br><span class="line">    <span class="comment">//endRecord数组用于记录结束位置</span></span><br><span class="line">    <span class="type">int</span> sum[n],endRecord[n];</span><br><span class="line">    <span class="comment">//初始化sum数组最后一个值</span></span><br><span class="line">    sum[n] = a[n];</span><br><span class="line">    <span class="comment">//初始化记录结束位置的数组</span></span><br><span class="line">    endRecord[n] = n;</span><br><span class="line">    <span class="comment">//从右往左的计算值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">    <span class="comment">//情况1：如果i + 1的数大于0 sum数组记录下i + （i+1）的数</span></span><br><span class="line">    <span class="comment">//endRecord记录下结束位置的值</span></span><br><span class="line">    <span class="keyword">if</span>(sum[i + <span class="number">1</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        sum[i] = a[i] + sum[i + <span class="number">1</span>];</span><br><span class="line">        endRecord[i] = endRecord[i + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//情况2：当i + 1的数小于0时</span></span><br><span class="line">    <span class="comment">//值为a数组本身的值</span></span><br><span class="line">    <span class="comment">//结尾位置变为i</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sum[i] = a[i];</span><br><span class="line">        endRecord[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;累加和数组为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n ;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,sum[i]);</span><br><span class="line">    <span class="comment">//查找结果函数</span></span><br><span class="line">    findResult(n,a,sum,endRecord);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">findResult</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> a[],<span class="type">int</span> sum[],<span class="type">int</span> endRecord[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> max,l,r,i;</span><br><span class="line">    <span class="comment">//从左往右开始查找</span></span><br><span class="line">    <span class="comment">//max初始化为sum数组第一个值</span></span><br><span class="line">    max = sum[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//和sum数组第二个值开始比对</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(max &lt; sum[i])&#123;</span><br><span class="line">        max = sum[i];</span><br><span class="line">        l = i;</span><br><span class="line">        r = endRecord[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n原数组为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;= n ; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n最大字段和为：%d 开始位置的数组下标：%d 结束位置的数组下标：%d&quot;</span>,max,l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//这里可以改为输入的方式</span></span><br><span class="line">    <span class="type">int</span> n=<span class="number">11</span>;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">-2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">-2</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">dynamicPlan(a,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;问题引入&quot;&gt;&lt;a href=&quot;#问题引入&quot; class=&quot;headerlink&quot; title=&quot;问题引入&quot;&gt;&lt;/a&gt;问题引入&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;什么是最大字段和问题？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;给定由 n 个整</summary>
      
    
    
    
    <category term="算法设计与分析" scheme="https://zaesky.github.io/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="算法" scheme="https://zaesky.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://zaesky.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zaesky.github.io/2022/04/06/hello-world/"/>
    <id>https://zaesky.github.io/2022/04/06/hello-world/</id>
    <published>2022-04-06T12:04:00.444Z</published>
    <updated>2022-04-06T12:04:00.445Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
