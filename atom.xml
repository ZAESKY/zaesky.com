<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZAESKY&#39;s Blog</title>
  
  <subtitle>我的思想聚集地</subtitle>
  <link href="https://zaesky.github.io/atom.xml" rel="self"/>
  
  <link href="https://zaesky.github.io/"/>
  <updated>2022-04-12T10:00:21.610Z</updated>
  <id>https://zaesky.github.io/</id>
  
  <author>
    <name>ZAESKY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript--对象</title>
    <link href="https://zaesky.github.io/2022/04/12/JavaScript-%E5%AF%B9%E8%B1%A1/"/>
    <id>https://zaesky.github.io/2022/04/12/JavaScript-%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-04-12T09:39:58.000Z</published>
    <updated>2022-04-12T10:00:21.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS中数据类型"><a href="#JS中数据类型" class="headerlink" title="JS中数据类型"></a>JS中数据类型</h3><p><strong>String 字符串</strong><br><strong>Number 数值</strong><br><strong>Boolean 布尔值</strong><br><strong>Null 空值</strong><br><strong>Undefined 未定义</strong><br>以上这五种类型属于基本数据类型，以后我们看到的值只要不是上边的5种，全都是对象</p><h4 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a><strong>Object 对象</strong></h4><p>基本数据类型都是单一的值”hello” 123 true<br>值和值之间没有任何的联系。</p><p>在JS中来表示一个人的信息（name gender age）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> gender = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>如果使用基本数据类型的数据，我们所创建的变量都是独立，不能成为一个整体。<br>对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</p><h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><h4 id="1-内建对象"><a href="#1-内建对象" class="headerlink" title="1.内建对象"></a><strong>1.内建对象</strong></h4><p>由ES标准中定义的对象，在任何的ES的实现中都可以使用</p><p>比如：Math String Number Boolean Function Object….</p><h4 id="2-宿主对象"><a href="#2-宿主对象" class="headerlink" title="2.宿主对象"></a>2.宿主对象</h4><p>由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象</p><p>比如 BOM DOM</p><h4 id="3-自定义对象"><a href="#3-自定义对象" class="headerlink" title="3.自定义对象"></a>3.自定义对象</h4><p>由开发人员自己创建的对象</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>使用new关键字调用的函数，是构造函数constructor</p><p>构造函数是专门用来创建对象的函数</p><p>使用typeof检查一个对象时，会返回object</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>在对象中保存的值称为属性<br>向对象添加属性</p><blockquote><p>语法：对象.属性名 &#x3D; 属性值;</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向obj中添加一个name属性</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line"><span class="comment">//向obj中添加一个gender属性</span></span><br><span class="line">obj.<span class="property">gender</span> = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="comment">//向obj中添加一个age属性</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><h4 id="读取对象中的属性"><a href="#读取对象中的属性" class="headerlink" title="读取对象中的属性"></a>读取对象中的属性</h4><p>语法：</p><blockquote><p>对象.属性名</p></blockquote><p><strong>如果读取对象中没有的属性，不会报错而是会返回undefined</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">gender</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">hello</span>);</span><br></pre></td></tr></table></figure><h4 id="修改对象的属性值"><a href="#修改对象的属性值" class="headerlink" title="修改对象的属性值"></a>修改对象的属性值</h4><p>语法：</p><blockquote><p>对象.属性名 &#x3D; 新值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;tom&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h4><p>语法：</p><blockquote><p>delete 对象.属性名</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JS中数据类型&quot;&gt;&lt;a href=&quot;#JS中数据类型&quot; class=&quot;headerlink&quot; title=&quot;JS中数据类型&quot;&gt;&lt;/a&gt;JS中数据类型&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;String 字符串&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Number 数值&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zaesky.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="js" scheme="https://zaesky.github.io/tags/js/"/>
    
    <category term="js基础" scheme="https://zaesky.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>算法设计与分析--最大字段和问题【动态规划法】</title>
    <link href="https://zaesky.github.io/2022/04/09/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E6%9C%80%E5%A4%A7%E5%AD%97%E6%AE%B5%E5%92%8C%E9%97%AE%E9%A2%98%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B3%95%E3%80%91/"/>
    <id>https://zaesky.github.io/2022/04/09/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E6%9C%80%E5%A4%A7%E5%AD%97%E6%AE%B5%E5%92%8C%E9%97%AE%E9%A2%98%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B3%95%E3%80%91/</id>
    <published>2022-04-09T07:39:50.000Z</published>
    <updated>2022-04-09T08:10:26.688Z</updated>
    
    <content type="html"><![CDATA[<h5 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h5><blockquote><p>什么是最大字段和问题？</p></blockquote><p><strong>给定由 n 个整数（可能为负整数）组成的序列a1，a2，a3…an，求该数列中连续子段和最大！</strong></p><p>  例如：当（a1，a2，a3，a4，a5）&#x3D;（-2,11，-4,13，-5，-2）时，最大字段和为 20 （11 + (-4) + 13）;</p><h5 id="条件递推"><a href="#条件递推" class="headerlink" title="条件递推"></a>条件递推</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/806c0446f60541c795e29db3d7b29e94.png"                      alt="img"                ></p><blockquote><p>D[i]表示从i开始的最大字段和。（但我们不是从前往后找字段结束位置）<br>根据递推公式，我们可知要想求得D[i],就必须知道D[i+1],所以我们从前往后计算。<br>如下图：以i&#x3D;12开始的子段和D[12]&#x3D;X[12]&#x3D;-1，该子段结束位置Rec[12]&#x3D;i&#x3D;12；<br>当i&#x3D;11时，D[11+1]&lt;0,所以D[11]&#x3D;X[11]&#x3D;7,Rec[i]&#x3D;i&#x3D;11;<br>当i&#x3D;10时，D[10+1]&gt;0,所以D[10]&#x3D;X[10]+D[11]&#x3D;3+7,Rec&#x3D;i+1&#x3D;11;<br>…</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/99e6252580f94889a9b3148e2db41278.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Z2X5rS76L-H5p2l,size_20,color_FFFFFF,t_70,g_se,x_16"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdnimg.cn/424a688ab7d04338a5ccb53fae23860f.png"                      alt="img"                ></p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态规划函数 接收数组和数组个数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dynamicPlan</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="comment">//定义三个数组</span></span><br><span class="line">    <span class="comment">//sum数组用于记录累加结果</span></span><br><span class="line">    <span class="comment">//endRecord数组用于记录结束位置</span></span><br><span class="line">    <span class="type">int</span> sum[n],endRecord[n];</span><br><span class="line">    <span class="comment">//初始化sum数组最后一个值</span></span><br><span class="line">    sum[n] = a[n];</span><br><span class="line">    <span class="comment">//初始化记录结束位置的数组</span></span><br><span class="line">    endRecord[n] = n;</span><br><span class="line">    <span class="comment">//从右往左的计算值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">    <span class="comment">//情况1：如果i + 1的数大于0 sum数组记录下i + （i+1）的数</span></span><br><span class="line">    <span class="comment">//endRecord记录下结束位置的值</span></span><br><span class="line">    <span class="keyword">if</span>(sum[i + <span class="number">1</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        sum[i] = a[i] + sum[i + <span class="number">1</span>];</span><br><span class="line">        endRecord[i] = endRecord[i + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//情况2：当i + 1的数小于0时</span></span><br><span class="line">    <span class="comment">//值为a数组本身的值</span></span><br><span class="line">    <span class="comment">//结尾位置变为i</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sum[i] = a[i];</span><br><span class="line">        endRecord[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;累加和数组为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n ;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,sum[i]);</span><br><span class="line">    <span class="comment">//查找结果函数</span></span><br><span class="line">    findResult(n,a,sum,endRecord);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">findResult</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> a[],<span class="type">int</span> sum[],<span class="type">int</span> endRecord[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> max,l,r,i;</span><br><span class="line">    <span class="comment">//从左往右开始查找</span></span><br><span class="line">    <span class="comment">//max初始化为sum数组第一个值</span></span><br><span class="line">    max = sum[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//和sum数组第二个值开始比对</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(max &lt; sum[i])&#123;</span><br><span class="line">        max = sum[i];</span><br><span class="line">        l = i;</span><br><span class="line">        r = endRecord[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n原数组为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;= n ; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n最大字段和为：%d 开始位置的数组下标：%d 结束位置的数组下标：%d&quot;</span>,max,l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//这里可以改为输入的方式</span></span><br><span class="line">    <span class="type">int</span> n=<span class="number">11</span>;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">-2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">-2</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">dynamicPlan(a,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;问题引入&quot;&gt;&lt;a href=&quot;#问题引入&quot; class=&quot;headerlink&quot; title=&quot;问题引入&quot;&gt;&lt;/a&gt;问题引入&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;什么是最大字段和问题？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;给定由 n 个整</summary>
      
    
    
    
    <category term="算法设计与分析" scheme="https://zaesky.github.io/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="算法" scheme="https://zaesky.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://zaesky.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zaesky.github.io/2022/04/06/hello-world/"/>
    <id>https://zaesky.github.io/2022/04/06/hello-world/</id>
    <published>2022-04-06T12:04:00.444Z</published>
    <updated>2022-04-06T12:04:00.445Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
